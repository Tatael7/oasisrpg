{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _shallowEqual = require('fbjs/lib/shallowEqual');\n\nvar _shallowEqual2 = _interopRequireDefault(_shallowEqual);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nfunction on(target, eventName, callback, capture) {\n  if (target.addEventListener) {\n    target.addEventListener(eventName, callback, capture);\n  } else if (target.attachEvent) {\n    // IE8+ Support\n    target.attachEvent('on' + eventName, function () {\n      callback.call(target);\n    });\n  }\n}\n\nfunction off(target, eventName, callback, capture) {\n  if (target.removeEventListener) {\n    target.removeEventListener(eventName, callback, capture);\n  } else if (target.detachEvent) {\n    // IE8+ Support\n    target.detachEvent('on' + eventName, callback);\n  }\n}\n\nfunction forEachListener(props, iteratee) {\n  for (var name in props) {\n    if (name.substring(0, 2) === 'on' && props[name] instanceof Function) {\n      var _eventName = name.substring(2).toLowerCase();\n\n      iteratee(_eventName, props[name]);\n    }\n  }\n}\n\nvar EventListener = function (_Component) {\n  _inherits(EventListener, _Component);\n\n  function EventListener() {\n    _classCallCheck(this, EventListener);\n\n    return _possibleConstructorReturn(this, Object.getPrototypeOf(EventListener).apply(this, arguments));\n  }\n\n  _createClass(EventListener, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.addListeners();\n    }\n  }, {\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate(nextProps) {\n      return !(0, _shallowEqual2.default)(this.props, nextProps);\n    }\n  }, {\n    key: 'componentWillUpdate',\n    value: function componentWillUpdate() {\n      this.removeListeners();\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      this.addListeners();\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.removeListeners();\n    }\n  }, {\n    key: 'addListeners',\n    value: function addListeners() {\n      var _this2 = this;\n\n      var _props = this.props;\n      var capture = _props.capture;\n      var target = _props.target;\n\n      if (target) {\n        (function () {\n          var element = target;\n\n          if (typeof target === 'string') {\n            element = window[target];\n          }\n\n          forEachListener(_this2.props, function (eventName, listener) {\n            return on(element, eventName, listener, capture);\n          });\n        })();\n      }\n    }\n  }, {\n    key: 'removeListeners',\n    value: function removeListeners() {\n      var _this3 = this;\n\n      var _props2 = this.props;\n      var capture = _props2.capture;\n      var target = _props2.target;\n\n      if (target) {\n        (function () {\n          var element = target;\n\n          if (typeof target === 'string') {\n            element = window[target];\n          }\n\n          forEachListener(_this3.props, function (eventName, listener) {\n            return off(element, eventName, listener, capture);\n          });\n        })();\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return this.props.children || null;\n    }\n  }]);\n\n  return EventListener;\n}(_react.Component);\n\nEventListener.propTypes = {\n  /**\n   * Whether to use capturing listeners.\n   */\n  capture: _react.PropTypes.bool.isRequired,\n\n  /**\n   * You can provide a children too.\n   */\n  children: _react.PropTypes.node,\n\n  /**\n   * The DOM target to listen to.\n   */\n  target: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.object, _react2.default.PropTypes.string])\n};\nEventListener.defaultProps = {\n  capture: false\n};\nexports.default = EventListener;","map":null,"metadata":{},"sourceType":"script"}
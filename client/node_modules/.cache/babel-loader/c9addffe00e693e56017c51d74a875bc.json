{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _ValidatingFormsyText = require('./ValidatingFormsyText');\n\nvar _ValidatingFormsyText2 = _interopRequireDefault(_ValidatingFormsyText);\n\nvar _FormsyText = require('formsy-material-ui/lib/FormsyText');\n\nvar _FormsyText2 = _interopRequireDefault(_FormsyText);\n\nvar _RaisedButton = require('material-ui/RaisedButton');\n\nvar _RaisedButton2 = _interopRequireDefault(_RaisedButton);\n\nvar _segmentedControl = require('segmented-control');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar BankForm = function (_Component) {\n  (0, _inherits3.default)(BankForm, _Component);\n\n  function BankForm(props, context) {\n    (0, _classCallCheck3.default)(this, BankForm);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(BankForm).call(this, props, context));\n\n    _this.state = {\n      canSubmit: false\n    };\n    _this.enableButton = _this.enableButton.bind(_this);\n    _this.disableButton = _this.disableButton.bind(_this);\n    return _this;\n  }\n\n  (0, _createClass3.default)(BankForm, [{\n    key: 'enableButton',\n    value: function enableButton() {\n      this.setState({\n        canSubmit: true\n      });\n    }\n  }, {\n    key: 'disableButton',\n    value: function disableButton() {\n      this.setState({\n        canSubmit: false\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var defaultStyle = {\n        display: \"block\"\n      };\n\n      var style = _.extend(defaultStyle, this.props.style);\n\n      var defaultValues = this.props.defaultValues;\n      return _react2.default.createElement(Formsy.Form, {\n        className: 'card-form',\n        onValid: this.enableButton,\n        onInvalid: this.disableButton,\n        onValidSubmit: this.props.onSubmit,\n        autoComplete: 'on'\n      }, _react2.default.createElement(_FormsyText2.default, {\n        name: 'name',\n        ref: 'name',\n        floatingLabelText: 'Name on account',\n        style: style,\n        defaultValue: defaultValues.name,\n        required: true\n      }), _react2.default.createElement(_FormsyText2.default, {\n        name: 'accountNumber',\n        ref: 'accountNumber',\n        type: 'tel',\n        pattern: '\\\\d*',\n        floatingLabelText: 'Account number',\n        validations: {\n          isNumeric: true,\n          isValid: function isValid(otherValues, accountNumber) {\n            if (window.Stripe && Stripe.bankAccount && Stripe.bankAccount.validateAccountNumber) {\n              return Stripe.bankAccount.validateAccountNumber(accountNumber, 'US');\n            } else {\n              return true;\n            }\n          }\n        },\n        validationError: 'Invalid account number',\n        className: 'account-number',\n        style: style,\n        defaultValue: defaultValues.accountNumber,\n        required: true\n      }), _react2.default.createElement(_ValidatingFormsyText2.default, {\n        name: 'routingNumber',\n        ref: 'routingNumber',\n        type: 'tel',\n        pattern: '\\\\d*',\n        floatingLabelText: 'Routing number',\n        validations: {\n          isNumeric: true,\n          isValid: function isValid(otherValues, routingNumber) {\n            if (window.Stripe && Stripe.bankAccount && Stripe.bankAccount.validateRoutingNumber) {\n              return Stripe.bankAccount.validateRoutingNumber(routingNumber, 'US');\n            } else {\n              return true;\n            }\n          }\n        },\n        validationError: 'Invalid routing number',\n        className: 'routing-number',\n        style: style,\n        defaultValue: defaultValues.routingNumber,\n        required: true\n      }), _react2.default.createElement(_segmentedControl.FormsySegmentedControl, {\n        name: 'accountType',\n        options: [{\n          label: \"Personal\",\n          value: \"personal\",\n          default: true\n        }, {\n          label: \"Business\",\n          value: \"business\"\n        }]\n      }), _react2.default.createElement(_RaisedButton2.default, {\n        type: 'submit',\n        label: 'add bank account',\n        disabled: !this.state.canSubmit,\n        style: _.extend({\n          width: 200,\n          margin: \"20px auto\"\n        }, style),\n        primary: true\n      }));\n    }\n  }]);\n  return BankForm;\n}(_react.Component);\n\nBankForm.propTypes = {\n  onSubmit: _react.PropTypes.func.isRequired,\n  defaultValues: _react.PropTypes.object,\n  style: _react.PropTypes.object\n};\nBankForm.defaultProps = {\n  defaultValues: {}\n};\nexports.default = BankForm;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _simpleAssign = require('simple-assign');\n\nvar _simpleAssign2 = _interopRequireDefault(_simpleAssign);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _keycode = require('keycode');\n\nvar _keycode2 = _interopRequireDefault(_keycode);\n\nvar _shallowEqual = require('recompose/shallowEqual');\n\nvar _shallowEqual2 = _interopRequireDefault(_shallowEqual);\n\nvar _colorManipulator = require('../utils/colorManipulator');\n\nvar _transitions = require('../styles/transitions');\n\nvar _transitions2 = _interopRequireDefault(_transitions);\n\nvar _deprecatedPropType = require('../utils/deprecatedPropType');\n\nvar _deprecatedPropType2 = _interopRequireDefault(_deprecatedPropType);\n\nvar _EnhancedTextarea = require('./EnhancedTextarea');\n\nvar _EnhancedTextarea2 = _interopRequireDefault(_EnhancedTextarea);\n\nvar _TextFieldHint = require('./TextFieldHint');\n\nvar _TextFieldHint2 = _interopRequireDefault(_TextFieldHint);\n\nvar _TextFieldLabel = require('./TextFieldLabel');\n\nvar _TextFieldLabel2 = _interopRequireDefault(_TextFieldLabel);\n\nvar _TextFieldUnderline = require('./TextFieldUnderline');\n\nvar _TextFieldUnderline2 = _interopRequireDefault(_TextFieldUnderline);\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar getStyles = function getStyles(props, context, state) {\n  var _context$muiTheme = context.muiTheme;\n  var baseTheme = _context$muiTheme.baseTheme;\n  var _context$muiTheme$tex = _context$muiTheme.textField;\n  var floatingLabelColor = _context$muiTheme$tex.floatingLabelColor;\n  var focusColor = _context$muiTheme$tex.focusColor;\n  var textColor = _context$muiTheme$tex.textColor;\n  var disabledTextColor = _context$muiTheme$tex.disabledTextColor;\n  var backgroundColor = _context$muiTheme$tex.backgroundColor;\n  var hintColor = _context$muiTheme$tex.hintColor;\n  var errorColor = _context$muiTheme$tex.errorColor;\n  var styles = {\n    root: {\n      fontSize: 16,\n      lineHeight: '24px',\n      width: props.fullWidth ? '100%' : 256,\n      height: (props.rows - 1) * 24 + (props.floatingLabelText ? 72 : 48),\n      display: 'inline-block',\n      position: 'relative',\n      backgroundColor: backgroundColor,\n      fontFamily: baseTheme.fontFamily,\n      transition: _transitions2.default.easeOut('200ms', 'height')\n    },\n    error: {\n      position: 'relative',\n      bottom: 2,\n      fontSize: 12,\n      lineHeight: '12px',\n      color: errorColor,\n      transition: _transitions2.default.easeOut()\n    },\n    floatingLabel: {\n      color: hintColor,\n      pointerEvents: 'none'\n    },\n    input: {\n      WebkitTapHighlightColor: 'rgba(0,0,0,0)',\n      // Remove mobile color flashing (deprecated style)\n      padding: 0,\n      position: 'relative',\n      width: '100%',\n      border: 'none',\n      outline: 'none',\n      backgroundColor: 'rgba(0,0,0,0)',\n      color: props.disabled ? disabledTextColor : textColor,\n      cursor: props.disabled ? 'not-allowed' : 'initial',\n      font: 'inherit'\n    },\n    textarea: {}\n  };\n  (0, _simpleAssign2.default)(styles.error, props.errorStyle);\n  (0, _simpleAssign2.default)(styles.textarea, styles.input, {\n    marginTop: props.floatingLabelText ? 36 : 12,\n    marginBottom: props.floatingLabelText ? -36 : -12,\n    boxSizing: 'border-box',\n    font: 'inherit'\n  }); // Do not assign a height to the textarea as he handles it on his own.\n\n  styles.input.height = '100%';\n\n  if (state.hasValue) {\n    styles.floatingLabel.color = (0, _colorManipulator.fade)(props.disabled ? disabledTextColor : floatingLabelColor, 0.5);\n  }\n\n  if (state.isFocused) {\n    styles.floatingLabel.color = focusColor;\n  }\n\n  if (props.floatingLabelText) {\n    styles.input.boxSizing = 'border-box';\n\n    if (!props.multiLine) {\n      styles.input.marginTop = 14;\n    }\n\n    if (state.errorText) {\n      styles.error.bottom = !props.multiLine ? styles.error.fontSize + 3 : 3;\n    }\n  }\n\n  if (state.errorText) {\n    if (state.isFocused) {\n      styles.floatingLabel.color = styles.error.color;\n    }\n  }\n\n  return styles;\n};\n/**\n * Check if a value is valid to be displayed inside an input.\n *\n * @param The value to check.\n * @returns True if the string provided is valid, false otherwise.\n */\n\n\nfunction isValid(value) {\n  return value !== '' && value !== undefined && value !== null;\n}\n\nvar TextField = function (_Component) {\n  _inherits(TextField, _Component);\n\n  function TextField() {\n    var _Object$getPrototypeO;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, TextField);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_Object$getPrototypeO = Object.getPrototypeOf(TextField)).call.apply(_Object$getPrototypeO, [this].concat(args))), _this), _this.state = {\n      isFocused: false,\n      errorText: undefined,\n      hasValue: false,\n      isClean: true\n    }, _this.handleInputBlur = function (event) {\n      _this.setState({\n        isFocused: false\n      });\n\n      if (_this.props.onBlur) _this.props.onBlur(event);\n    }, _this.handleInputChange = function (event) {\n      _this.setState({\n        hasValue: isValid(event.target.value),\n        isClean: false\n      });\n\n      if (_this.props.onChange) _this.props.onChange(event, event.target.value);\n    }, _this.handleInputFocus = function (event) {\n      if (_this.props.disabled) return;\n\n      _this.setState({\n        isFocused: true\n      });\n\n      if (_this.props.onFocus) _this.props.onFocus(event);\n    }, _this.handleInputKeyDown = function (event) {\n      if ((0, _keycode2.default)(event) === 'enter' && _this.props.onEnterKeyDown) _this.props.onEnterKeyDown(event);\n      if (_this.props.onKeyDown) _this.props.onKeyDown(event);\n    }, _this.handleHeightChange = function (event, height) {\n      var newHeight = height + 24;\n\n      if (_this.props.floatingLabelText) {\n        newHeight += 24;\n      }\n\n      _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(TextField, [{\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      var _props = this.props;\n      var children = _props.children;\n      var name = _props.name;\n      var hintText = _props.hintText;\n      var floatingLabelText = _props.floatingLabelText;\n      var id = _props.id;\n      var propsLeaf = children ? children.props : this.props;\n      this.setState({\n        errorText: this.props.errorText,\n        hasValue: isValid(propsLeaf.value) || isValid(propsLeaf.defaultValue)\n      });\n      process.env.NODE_ENV !== \"production\" ? (0, _warning2.default)(name || hintText || floatingLabelText || id, 'We don\\'t have enough information\\n      to build a robust unique id for the TextField component. Please provide an id or a name.') : void 0;\n      var uniqueId = name + '-' + hintText + '-' + floatingLabelText + '-' + Math.floor(Math.random() * 0xFFFF);\n      this.uniqueId = uniqueId.replace(/[^A-Za-z0-9-]/gi, '');\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.errorText !== this.props.errorText) {\n        this.setState({\n          errorText: nextProps.errorText\n        });\n      }\n\n      if (nextProps.children && nextProps.children.props) {\n        nextProps = nextProps.children.props;\n      }\n\n      if (nextProps.hasOwnProperty('value')) {\n        var hasValue = isValid(nextProps.value) || this.state.isClean && isValid(nextProps.defaultValue);\n\n        if (hasValue !== this.state.hasValue) {\n          this.setState({\n            hasValue: hasValue\n          });\n        }\n      }\n    }\n  }, {\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate(nextProps, nextState, nextContext) {\n      return !(0, _shallowEqual2.default)(this.props, nextProps) || !(0, _shallowEqual2.default)(this.state, nextState) || !(0, _shallowEqual2.default)(this.context, nextContext);\n    }\n  }, {\n    key: 'blur',\n    value: function blur() {\n      if (this.input) this.getInputNode().blur();\n    }\n  }, {\n    key: 'focus',\n    value: function focus() {\n      if (this.input) this.getInputNode().focus();\n    }\n  }, {\n    key: 'select',\n    value: function select() {\n      if (this.input) this.getInputNode().select();\n    }\n  }, {\n    key: 'getValue',\n    value: function getValue() {\n      return this.input ? this.getInputNode().value : undefined;\n    }\n  }, {\n    key: 'getInputNode',\n    value: function getInputNode() {\n      return this.props.children || this.props.multiLine ? this.input.getInputNode() : _reactDom2.default.findDOMNode(this.input);\n    }\n  }, {\n    key: '_isControlled',\n    value: function _isControlled() {\n      return this.props.hasOwnProperty('value');\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props2 = this.props;\n      var children = _props2.children;\n      var className = _props2.className;\n      var disabled = _props2.disabled;\n      var errorStyle = _props2.errorStyle;\n      var errorText = _props2.errorText;\n      var floatingLabelFixed = _props2.floatingLabelFixed;\n      var floatingLabelFocusStyle = _props2.floatingLabelFocusStyle;\n      var floatingLabelStyle = _props2.floatingLabelStyle;\n      var floatingLabelText = _props2.floatingLabelText;\n      var fullWidth = _props2.fullWidth;\n      var hintText = _props2.hintText;\n      var hintStyle = _props2.hintStyle;\n      var id = _props2.id;\n      var inputStyle = _props2.inputStyle;\n      var multiLine = _props2.multiLine;\n      var onBlur = _props2.onBlur;\n      var onChange = _props2.onChange;\n      var onFocus = _props2.onFocus;\n      var style = _props2.style;\n      var type = _props2.type;\n      var underlineDisabledStyle = _props2.underlineDisabledStyle;\n      var underlineFocusStyle = _props2.underlineFocusStyle;\n      var underlineShow = _props2.underlineShow;\n      var underlineStyle = _props2.underlineStyle;\n      var rows = _props2.rows;\n      var rowsMax = _props2.rowsMax;\n      var textareaStyle = _props2.textareaStyle;\n\n      var other = _objectWithoutProperties(_props2, ['children', 'className', 'disabled', 'errorStyle', 'errorText', 'floatingLabelFixed', 'floatingLabelFocusStyle', 'floatingLabelStyle', 'floatingLabelText', 'fullWidth', 'hintText', 'hintStyle', 'id', 'inputStyle', 'multiLine', 'onBlur', 'onChange', 'onFocus', 'style', 'type', 'underlineDisabledStyle', 'underlineFocusStyle', 'underlineShow', 'underlineStyle', 'rows', 'rowsMax', 'textareaStyle']);\n\n      var prepareStyles = this.context.muiTheme.prepareStyles;\n      var styles = getStyles(this.props, this.context, this.state);\n      var inputId = id || this.uniqueId;\n\n      var errorTextElement = this.state.errorText && _react2.default.createElement('div', {\n        style: prepareStyles(styles.error)\n      }, this.state.errorText);\n\n      var floatingLabelTextElement = floatingLabelText && _react2.default.createElement(_TextFieldLabel2.default, {\n        muiTheme: this.context.muiTheme,\n        style: (0, _simpleAssign2.default)(styles.floatingLabel, this.props.floatingLabelStyle),\n        shrinkStyle: this.props.floatingLabelFocusStyle,\n        htmlFor: inputId,\n        shrink: this.state.hasValue || this.state.isFocused || floatingLabelFixed,\n        disabled: disabled\n      }, floatingLabelText);\n\n      var inputProps = {\n        id: inputId,\n        ref: function ref(elem) {\n          return _this2.input = elem;\n        },\n        disabled: this.props.disabled,\n        onBlur: this.handleInputBlur,\n        onChange: this.handleInputChange,\n        onFocus: this.handleInputFocus,\n        onKeyDown: this.handleInputKeyDown\n      };\n      var inputStyleMerged = (0, _simpleAssign2.default)(styles.input, inputStyle);\n      var inputElement = void 0;\n\n      if (children) {\n        inputElement = _react2.default.cloneElement(children, _extends({}, inputProps, children.props, {\n          style: (0, _simpleAssign2.default)(inputStyleMerged, children.props.style)\n        }));\n      } else {\n        inputElement = multiLine ? _react2.default.createElement(_EnhancedTextarea2.default, _extends({}, other, inputProps, {\n          style: inputStyleMerged,\n          rows: rows,\n          rowsMax: rowsMax,\n          onHeightChange: this.handleHeightChange,\n          textareaStyle: (0, _simpleAssign2.default)(styles.textarea, textareaStyle)\n        })) : _react2.default.createElement('input', _extends({}, other, inputProps, {\n          style: prepareStyles(inputStyleMerged),\n          type: type\n        }));\n      }\n\n      var rootProps = {};\n\n      if (children) {\n        rootProps = other;\n      }\n\n      return _react2.default.createElement('div', _extends({}, rootProps, {\n        className: className,\n        style: prepareStyles((0, _simpleAssign2.default)(styles.root, style))\n      }), floatingLabelTextElement, hintText ? _react2.default.createElement(_TextFieldHint2.default, {\n        muiTheme: this.context.muiTheme,\n        show: !(this.state.hasValue || floatingLabelText && !this.state.isFocused) || !this.state.hasValue && floatingLabelText && floatingLabelFixed && !this.state.isFocused,\n        style: hintStyle,\n        text: hintText\n      }) : null, inputElement, underlineShow ? _react2.default.createElement(_TextFieldUnderline2.default, {\n        disabled: disabled,\n        disabledStyle: underlineDisabledStyle,\n        error: !!this.state.errorText,\n        errorStyle: errorStyle,\n        focus: this.state.isFocused,\n        focusStyle: underlineFocusStyle,\n        muiTheme: this.context.muiTheme,\n        style: underlineStyle\n      }) : null, errorTextElement);\n    }\n  }]);\n\n  return TextField;\n}(_react.Component);\n\nTextField.propTypes = {\n  children: _react.PropTypes.node,\n\n  /**\n   * The css class name of the root element.\n   */\n  className: _react.PropTypes.string,\n\n  /**\n   * The text string to use for the default value.\n   */\n  defaultValue: _react.PropTypes.any,\n\n  /**\n   * Disables the text field if set to true.\n   */\n  disabled: _react.PropTypes.bool,\n\n  /**\n   * The style object to use to override error styles.\n   */\n  errorStyle: _react.PropTypes.object,\n\n  /**\n   * The error content to display.\n   */\n  errorText: _react.PropTypes.node,\n\n  /**\n   * If true, the floating label will float even when there is no value.\n   */\n  floatingLabelFixed: _react.PropTypes.bool,\n\n  /**\n   * The style object to use to override floating label styles when focused.\n   */\n  floatingLabelFocusStyle: _react.PropTypes.object,\n\n  /**\n   * The style object to use to override floating label styles.\n   */\n  floatingLabelStyle: _react.PropTypes.object,\n\n  /**\n   * The content to use for the floating label element.\n   */\n  floatingLabelText: _react.PropTypes.node,\n\n  /**\n   * If true, the field receives the property width 100%.\n   */\n  fullWidth: _react.PropTypes.bool,\n\n  /**\n   * Override the inline-styles of the TextField's hint text element.\n   */\n  hintStyle: _react.PropTypes.object,\n\n  /**\n   * The hint content to display.\n   */\n  hintText: _react.PropTypes.node,\n\n  /**\n   * The id prop for the text field.\n   */\n  id: _react.PropTypes.string,\n\n  /**\n   * Override the inline-styles of the TextField's input element.\n   * When multiLine is false: define the style of the input element.\n   * When multiLine is true: define the style of the container of the textarea.\n   */\n  inputStyle: _react.PropTypes.object,\n\n  /**\n   * If true, a textarea element will be rendered.\n   * The textarea also grows and shrinks according to the number of lines.\n   */\n  multiLine: _react.PropTypes.bool,\n\n  /**\n   * Name applied to the input.\n   */\n  name: _react.PropTypes.string,\n\n  /** @ignore */\n  onBlur: _react.PropTypes.func,\n\n  /**\n   * Callback function that is fired when the textfield's value changes.\n   */\n  onChange: _react.PropTypes.func,\n\n  /**\n   * The function to call when the user presses the Enter key.\n   */\n  onEnterKeyDown: (0, _deprecatedPropType2.default)(_react.PropTypes.func, 'Use onKeyDown and check for keycode instead. It will be removed with v0.16.0.'),\n\n  /** @ignore */\n  onFocus: _react.PropTypes.func,\n\n  /** @ignore */\n  onKeyDown: _react.PropTypes.func,\n\n  /**\n   * Number of rows to display when multiLine option is set to true.\n   */\n  rows: _react.PropTypes.number,\n\n  /**\n   * Maximum number of rows to display when\n   * multiLine option is set to true.\n   */\n  rowsMax: _react.PropTypes.number,\n\n  /**\n   * Override the inline-styles of the root element.\n   */\n  style: _react.PropTypes.object,\n\n  /**\n   * Override the inline-styles of the TextField's textarea element.\n   * The TextField use either a textarea or an input,\n   * this property has effects only when multiLine is true.\n   */\n  textareaStyle: _react.PropTypes.object,\n\n  /**\n   * Specifies the type of input to display\n   * such as \"password\" or \"text\".\n   */\n  type: _react.PropTypes.string,\n\n  /**\n   * Override the inline-styles of the\n   * TextField's underline element when disabled.\n   */\n  underlineDisabledStyle: _react.PropTypes.object,\n\n  /**\n   * Override the inline-styles of the TextField's\n   * underline element when focussed.\n   */\n  underlineFocusStyle: _react.PropTypes.object,\n\n  /**\n   * If true, shows the underline for the text field.\n   */\n  underlineShow: _react.PropTypes.bool,\n\n  /**\n   * Override the inline-styles of the TextField's underline element.\n   */\n  underlineStyle: _react.PropTypes.object,\n\n  /**\n   * The value of the text field.\n   */\n  value: _react.PropTypes.any\n};\nTextField.defaultProps = {\n  disabled: false,\n  floatingLabelFixed: false,\n  multiLine: false,\n  fullWidth: false,\n  type: 'text',\n  underlineShow: true,\n  rows: 1\n};\nTextField.contextTypes = {\n  muiTheme: _react.PropTypes.object.isRequired\n};\nexports.default = TextField;","map":null,"metadata":{},"sourceType":"script"}
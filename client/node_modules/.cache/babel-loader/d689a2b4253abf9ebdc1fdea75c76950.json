{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _simpleAssign = require('simple-assign');\n\nvar _simpleAssign2 = _interopRequireDefault(_simpleAssign);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _transitions = require('../styles/transitions');\n\nvar _transitions2 = _interopRequireDefault(_transitions);\n\nvar _childUtils = require('../utils/childUtils');\n\nvar _colorManipulator = require('../utils/colorManipulator');\n\nvar _EnhancedButton = require('../internal/EnhancedButton');\n\nvar _EnhancedButton2 = _interopRequireDefault(_EnhancedButton);\n\nvar _FlatButtonLabel = require('./FlatButtonLabel');\n\nvar _FlatButtonLabel2 = _interopRequireDefault(_FlatButtonLabel);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nfunction validateLabel(props, propName, componentName) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (!props.children && props.label !== 0 && !props.label && !props.icon) {\n      return new Error('Required prop label or children or icon was not specified in ' + componentName + '.');\n    }\n  }\n}\n\nvar FlatButton = function (_Component) {\n  _inherits(FlatButton, _Component);\n\n  function FlatButton() {\n    var _Object$getPrototypeO;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, FlatButton);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_Object$getPrototypeO = Object.getPrototypeOf(FlatButton)).call.apply(_Object$getPrototypeO, [this].concat(args))), _this), _this.state = {\n      hovered: false,\n      isKeyboardFocused: false,\n      touch: false\n    }, _this.handleKeyboardFocus = function (event, isKeyboardFocused) {\n      _this.setState({\n        isKeyboardFocused: isKeyboardFocused\n      });\n\n      _this.props.onKeyboardFocus(event, isKeyboardFocused);\n    }, _this.handleMouseEnter = function (event) {\n      // Cancel hover styles for touch devices\n      if (!_this.state.touch) _this.setState({\n        hovered: true\n      });\n\n      _this.props.onMouseEnter(event);\n    }, _this.handleMouseLeave = function (event) {\n      _this.setState({\n        hovered: false\n      });\n\n      _this.props.onMouseLeave(event);\n    }, _this.handleTouchStart = function (event) {\n      _this.setState({\n        touch: true\n      });\n\n      _this.props.onTouchStart(event);\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(FlatButton, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.disabled && this.state.hovered) {\n        this.setState({\n          hovered: false\n        });\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props;\n      var children = _props.children;\n      var disabled = _props.disabled;\n      var hoverColor = _props.hoverColor;\n      var backgroundColor = _props.backgroundColor;\n      var icon = _props.icon;\n      var label = _props.label;\n      var labelStyle = _props.labelStyle;\n      var labelPosition = _props.labelPosition;\n      var primary = _props.primary;\n      var rippleColor = _props.rippleColor;\n      var secondary = _props.secondary;\n      var style = _props.style;\n\n      var other = _objectWithoutProperties(_props, ['children', 'disabled', 'hoverColor', 'backgroundColor', 'icon', 'label', 'labelStyle', 'labelPosition', 'primary', 'rippleColor', 'secondary', 'style']);\n\n      var _context$muiTheme = this.context.muiTheme;\n      var _context$muiTheme$but = _context$muiTheme.button;\n      var buttonHeight = _context$muiTheme$but.height;\n      var buttonMinWidth = _context$muiTheme$but.minWidth;\n      var buttonTextTransform = _context$muiTheme$but.textTransform;\n      var _context$muiTheme$fla = _context$muiTheme.flatButton;\n      var buttonFilterColor = _context$muiTheme$fla.buttonFilterColor;\n      var buttonColor = _context$muiTheme$fla.color;\n      var disabledTextColor = _context$muiTheme$fla.disabledTextColor;\n      var fontSize = _context$muiTheme$fla.fontSize;\n      var fontWeight = _context$muiTheme$fla.fontWeight;\n      var primaryTextColor = _context$muiTheme$fla.primaryTextColor;\n      var secondaryTextColor = _context$muiTheme$fla.secondaryTextColor;\n      var textColor = _context$muiTheme$fla.textColor;\n      var _context$muiTheme$fla2 = _context$muiTheme$fla.textTransform;\n      var textTransform = _context$muiTheme$fla2 === undefined ? buttonTextTransform || 'uppercase' : _context$muiTheme$fla2;\n      var defaultTextColor = disabled ? disabledTextColor : primary ? primaryTextColor : secondary ? secondaryTextColor : textColor;\n      var defaultHoverColor = (0, _colorManipulator.fade)(buttonFilterColor, 0.2);\n      var defaultRippleColor = buttonFilterColor;\n      var buttonHoverColor = hoverColor || defaultHoverColor;\n      var buttonRippleColor = rippleColor || defaultRippleColor;\n      var buttonBackgroundColor = backgroundColor || buttonColor;\n      var hovered = (this.state.hovered || this.state.isKeyboardFocused) && !disabled;\n      var mergedRootStyles = (0, _simpleAssign2.default)({}, {\n        height: buttonHeight,\n        lineHeight: buttonHeight + 'px',\n        minWidth: buttonMinWidth,\n        color: defaultTextColor,\n        transition: _transitions2.default.easeOut(),\n        borderRadius: 2,\n        userSelect: 'none',\n        position: 'relative',\n        overflow: 'hidden',\n        backgroundColor: hovered ? buttonHoverColor : buttonBackgroundColor,\n        padding: 0,\n        margin: 0,\n        textAlign: 'center'\n      }, style);\n      var iconCloned = void 0;\n      var labelStyleIcon = {};\n\n      if (icon) {\n        var iconStyles = (0, _simpleAssign2.default)({\n          verticalAlign: 'middle',\n          marginLeft: label && labelPosition !== 'before' ? 12 : 0,\n          marginRight: label && labelPosition === 'before' ? 12 : 0\n        }, icon.props.style);\n        iconCloned = _react2.default.cloneElement(icon, {\n          color: icon.props.color || mergedRootStyles.color,\n          style: iconStyles\n        });\n\n        if (labelPosition === 'before') {\n          labelStyleIcon.paddingRight = 8;\n        } else {\n          labelStyleIcon.paddingLeft = 8;\n        }\n      }\n\n      var mergedLabelStyles = (0, _simpleAssign2.default)({\n        letterSpacing: 0,\n        textTransform: textTransform,\n        fontWeight: fontWeight,\n        fontSize: fontSize\n      }, labelStyleIcon, labelStyle);\n      var labelElement = label ? _react2.default.createElement(_FlatButtonLabel2.default, {\n        label: label,\n        style: mergedLabelStyles\n      }) : undefined; // Place label before or after children.\n\n      var childrenFragment = labelPosition === 'before' ? {\n        labelElement: labelElement,\n        iconCloned: iconCloned,\n        children: children\n      } : {\n        children: children,\n        iconCloned: iconCloned,\n        labelElement: labelElement\n      };\n      var enhancedButtonChildren = (0, _childUtils.createChildFragment)(childrenFragment);\n      return _react2.default.createElement(_EnhancedButton2.default, _extends({}, other, {\n        disabled: disabled,\n        focusRippleColor: buttonRippleColor,\n        focusRippleOpacity: 0.3,\n        onKeyboardFocus: this.handleKeyboardFocus,\n        onMouseLeave: this.handleMouseLeave,\n        onMouseEnter: this.handleMouseEnter,\n        onTouchStart: this.handleTouchStart,\n        style: mergedRootStyles,\n        touchRippleColor: buttonRippleColor,\n        touchRippleOpacity: 0.3\n      }), enhancedButtonChildren);\n    }\n  }]);\n\n  return FlatButton;\n}(_react.Component);\n\nFlatButton.muiName = 'FlatButton';\nFlatButton.propTypes = {\n  /**\n   * Color of button when mouse is not hovering over it.\n   */\n  backgroundColor: _react.PropTypes.string,\n\n  /**\n   * This is what will be displayed inside the button.\n   * If a label is specified, the text within the label prop will\n   * be displayed. Otherwise, the component will expect children\n   * which will then be displayed. (In our example,\n   * we are nesting an `<input type=\"file\" />` and a `span`\n   * that acts as our label to be displayed.) This only\n   * applies to flat and raised buttons.\n   */\n  children: _react.PropTypes.node,\n\n  /**\n   * Disables the button if set to true.\n   */\n  disabled: _react.PropTypes.bool,\n\n  /**\n   * Color of button when mouse hovers over.\n   */\n  hoverColor: _react.PropTypes.string,\n\n  /**\n   * The URL to link to when the button is clicked.\n   */\n  href: _react.PropTypes.string,\n\n  /**\n   * Use this property to display an icon.\n   */\n  icon: _react.PropTypes.node,\n\n  /**\n   * Label for the button.\n   */\n  label: validateLabel,\n\n  /**\n   * Place label before or after the passed children.\n   */\n  labelPosition: _react.PropTypes.oneOf(['before', 'after']),\n\n  /**\n   * Override the inline-styles of the button's label element.\n   */\n  labelStyle: _react.PropTypes.object,\n\n  /**\n   * Callback function fired when the element is focused or blurred by the keyboard.\n   *\n   * @param {object} event `focus` or `blur` event targeting the element.\n   * @param {boolean} isKeyboardFocused Indicates whether the element is focused.\n   */\n  onKeyboardFocus: _react.PropTypes.func,\n\n  /** @ignore */\n  onMouseEnter: _react.PropTypes.func,\n\n  /** @ignore */\n  onMouseLeave: _react.PropTypes.func,\n\n  /** @ignore */\n  onTouchStart: _react.PropTypes.func,\n\n  /**\n   * If true, colors button according to\n   * primaryTextColor from the Theme.\n   */\n  primary: _react.PropTypes.bool,\n\n  /**\n   * Color for the ripple after button is clicked.\n   */\n  rippleColor: _react.PropTypes.string,\n\n  /**\n   * If true, colors button according to secondaryTextColor from the theme.\n   * The primary prop has precendent if set to true.\n   */\n  secondary: _react.PropTypes.bool,\n\n  /**\n   * Override the inline-styles of the root element.\n   */\n  style: _react.PropTypes.object\n};\nFlatButton.defaultProps = {\n  disabled: false,\n  labelStyle: {},\n  labelPosition: 'after',\n  onKeyboardFocus: function onKeyboardFocus() {},\n  onMouseEnter: function onMouseEnter() {},\n  onMouseLeave: function onMouseLeave() {},\n  onTouchStart: function onTouchStart() {},\n  primary: false,\n  secondary: false\n};\nFlatButton.contextTypes = {\n  muiTheme: _react.PropTypes.object.isRequired\n};\nexports.default = FlatButton;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _FormsyText = require('formsy-material-ui/lib/FormsyText');\n\nvar _FormsyText2 = _interopRequireDefault(_FormsyText);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // Validates on change instead of just on blur\n//\n// Use on the last input of the form, so that the button is enabled as soon as\n// user types a valid entry\n//\n// https://github.com/mbrookes/formsy-material-ui/issues/97\n\n\nfunction debounceFunc(fn, delay) {\n  var timer = null;\n  return function () {\n    var _this = this;\n\n    var args = arguments;\n    clearTimeout(timer);\n    timer = setTimeout(function () {\n      fn.apply(_this, args);\n    }, delay);\n  };\n}\n\nexports.default = _react2.default.createClass({\n  displayName: 'ValidatingFormsyText',\n  componentDidMount: function componentDidMount() {\n    var _props$debounce = this.props.debounce;\n    var debounce = _props$debounce === undefined ? 200 : _props$debounce;\n    this.setValidate = debounceFunc(this.refs.input.setValue, debounce);\n  },\n  componentWillReceiveProps: function componentWillReceiveProps() {\n    var input = this.refs.input;\n    input.setState({\n      value: input.getValue() || ''\n    });\n  },\n  onChange: function onChange(event) {\n    if (this.props.onChange) this.props.onChange(event);\n    this.setValidate(event.currentTarget.value);\n  },\n  render: function render() {\n    return _react2.default.createElement(_FormsyText2.default, (0, _extends3.default)({\n      ref: 'input'\n    }, this.props, {\n      onChange: this.onChange\n    }));\n  }\n});","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _simpleAssign = require('simple-assign');\n\nvar _simpleAssign2 = _interopRequireDefault(_simpleAssign);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _reactEventListener = require('react-event-listener');\n\nvar _reactEventListener2 = _interopRequireDefault(_reactEventListener);\n\nvar _keycode = require('keycode');\n\nvar _keycode2 = _interopRequireDefault(_keycode);\n\nvar _transitions = require('../styles/transitions');\n\nvar _transitions2 = _interopRequireDefault(_transitions);\n\nvar _Overlay = require('../internal/Overlay');\n\nvar _Overlay2 = _interopRequireDefault(_Overlay);\n\nvar _RenderToLayer = require('../internal/RenderToLayer');\n\nvar _RenderToLayer2 = _interopRequireDefault(_RenderToLayer);\n\nvar _Paper = require('../Paper');\n\nvar _Paper2 = _interopRequireDefault(_Paper);\n\nvar _reactAddonsTransitionGroup = require('react-addons-transition-group');\n\nvar _reactAddonsTransitionGroup2 = _interopRequireDefault(_reactAddonsTransitionGroup);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar TransitionItem = function (_Component) {\n  _inherits(TransitionItem, _Component);\n\n  function TransitionItem() {\n    var _Object$getPrototypeO;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, TransitionItem);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_Object$getPrototypeO = Object.getPrototypeOf(TransitionItem)).call.apply(_Object$getPrototypeO, [this].concat(args))), _this), _this.state = {\n      style: {}\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(TransitionItem, [{\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      clearTimeout(this.enterTimeout);\n      clearTimeout(this.leaveTimeout);\n    }\n  }, {\n    key: 'componentWillEnter',\n    value: function componentWillEnter(callback) {\n      this.componentWillAppear(callback);\n    }\n  }, {\n    key: 'componentWillAppear',\n    value: function componentWillAppear(callback) {\n      var spacing = this.context.muiTheme.baseTheme.spacing;\n      this.setState({\n        style: {\n          opacity: 1,\n          transform: 'translate(0, ' + spacing.desktopKeylineIncrement + 'px)'\n        }\n      });\n      this.enterTimeout = setTimeout(callback, 450); // matches transition duration\n    }\n  }, {\n    key: 'componentWillLeave',\n    value: function componentWillLeave(callback) {\n      this.setState({\n        style: {\n          opacity: 0,\n          transform: 'translate(0, 0)'\n        }\n      });\n      this.leaveTimeout = setTimeout(callback, 450); // matches transition duration\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props;\n      var style = _props.style;\n      var children = _props.children;\n\n      var other = _objectWithoutProperties(_props, ['style', 'children']);\n\n      var prepareStyles = this.context.muiTheme.prepareStyles;\n      return _react2.default.createElement('div', _extends({}, other, {\n        style: prepareStyles((0, _simpleAssign2.default)({}, this.state.style, style))\n      }), children);\n    }\n  }]);\n\n  return TransitionItem;\n}(_react.Component);\n\nTransitionItem.propTypes = {\n  children: _react.PropTypes.node,\n  style: _react.PropTypes.object\n};\nTransitionItem.contextTypes = {\n  muiTheme: _react.PropTypes.object.isRequired\n};\n\nfunction getStyles(props, context) {\n  var autoScrollBodyContent = props.autoScrollBodyContent;\n  var open = props.open;\n  var _context$muiTheme = context.muiTheme;\n  var _context$muiTheme$bas = _context$muiTheme.baseTheme;\n  var spacing = _context$muiTheme$bas.spacing;\n  var palette = _context$muiTheme$bas.palette;\n  var dialog = _context$muiTheme.dialog;\n  var zIndex = _context$muiTheme.zIndex;\n  var gutter = spacing.desktopGutter;\n  var borderScroll = '1px solid ' + palette.borderColor;\n  return {\n    root: {\n      position: 'fixed',\n      boxSizing: 'border-box',\n      WebkitTapHighlightColor: 'rgba(0,0,0,0)',\n      // Remove mobile color flashing (deprecated)\n      zIndex: zIndex.dialog,\n      top: 0,\n      left: open ? 0 : -10000,\n      width: '100%',\n      height: '100%',\n      transition: open ? _transitions2.default.easeOut('0ms', 'left', '0ms') : _transitions2.default.easeOut('0ms', 'left', '450ms')\n    },\n    content: {\n      boxSizing: 'border-box',\n      WebkitTapHighlightColor: 'rgba(0,0,0,0)',\n      // Remove mobile color flashing (deprecated)\n      transition: _transitions2.default.easeOut(),\n      position: 'relative',\n      width: '75%',\n      maxWidth: spacing.desktopKeylineIncrement * 12,\n      margin: '0 auto',\n      zIndex: zIndex.dialog\n    },\n    actionsContainer: {\n      boxSizing: 'border-box',\n      WebkitTapHighlightColor: 'rgba(0,0,0,0)',\n      // Remove mobile color flashing (deprecated)\n      padding: 8,\n      width: '100%',\n      textAlign: 'right',\n      marginTop: autoScrollBodyContent ? -1 : 0,\n      borderTop: autoScrollBodyContent ? borderScroll : 'none'\n    },\n    overlay: {\n      zIndex: zIndex.dialogOverlay\n    },\n    title: {\n      margin: 0,\n      padding: gutter + 'px ' + gutter + 'px 20px ' + gutter + 'px',\n      color: palette.textColor,\n      fontSize: dialog.titleFontSize,\n      lineHeight: '32px',\n      fontWeight: 400,\n      marginBottom: autoScrollBodyContent ? -1 : 0,\n      borderBottom: autoScrollBodyContent ? borderScroll : 'none'\n    },\n    body: {\n      fontSize: dialog.bodyFontSize,\n      color: dialog.bodyColor,\n      padding: (props.title ? 0 : gutter) + 'px ' + gutter + 'px ' + gutter + 'px',\n      boxSizing: 'border-box',\n      overflowY: autoScrollBodyContent ? 'auto' : 'hidden'\n    }\n  };\n}\n\nvar DialogInline = function (_Component2) {\n  _inherits(DialogInline, _Component2);\n\n  function DialogInline() {\n    var _Object$getPrototypeO2;\n\n    var _temp2, _this2, _ret2;\n\n    _classCallCheck(this, DialogInline);\n\n    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return _ret2 = (_temp2 = (_this2 = _possibleConstructorReturn(this, (_Object$getPrototypeO2 = Object.getPrototypeOf(DialogInline)).call.apply(_Object$getPrototypeO2, [this].concat(args))), _this2), _this2.handleTouchTapOverlay = function () {\n      _this2.requestClose(false);\n    }, _this2.handleKeyUp = function (event) {\n      if ((0, _keycode2.default)(event) === 'esc') {\n        _this2.requestClose(false);\n      }\n    }, _this2.handleResize = function () {\n      _this2.positionDialog();\n    }, _temp2), _possibleConstructorReturn(_this2, _ret2);\n  }\n\n  _createClass(DialogInline, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.positionDialog();\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      this.positionDialog();\n    }\n  }, {\n    key: 'positionDialog',\n    value: function positionDialog() {\n      var _props2 = this.props;\n      var actions = _props2.actions;\n      var autoDetectWindowHeight = _props2.autoDetectWindowHeight;\n      var autoScrollBodyContent = _props2.autoScrollBodyContent;\n      var bodyStyle = _props2.bodyStyle;\n      var open = _props2.open;\n      var repositionOnUpdate = _props2.repositionOnUpdate;\n      var title = _props2.title;\n\n      if (!open) {\n        return;\n      }\n\n      var clientHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n\n      var container = _reactDom2.default.findDOMNode(this);\n\n      var dialogWindow = _reactDom2.default.findDOMNode(this.refs.dialogWindow);\n\n      var dialogContent = _reactDom2.default.findDOMNode(this.refs.dialogContent);\n\n      var minPaddingTop = 16; // Reset the height in case the window was resized.\n\n      dialogWindow.style.height = '';\n      dialogContent.style.height = '';\n      var dialogWindowHeight = dialogWindow.offsetHeight;\n      var paddingTop = (clientHeight - dialogWindowHeight) / 2 - 64;\n      if (paddingTop < minPaddingTop) paddingTop = minPaddingTop; // Vertically center the dialog window, but make sure it doesn't\n      // transition to that position.\n\n      if (repositionOnUpdate || !container.style.paddingTop) {\n        container.style.paddingTop = paddingTop + 'px';\n      } // Force a height if the dialog is taller than clientHeight\n\n\n      if (autoDetectWindowHeight || autoScrollBodyContent) {\n        var styles = getStyles(this.props, this.context);\n        styles.body = (0, _simpleAssign2.default)(styles.body, bodyStyle);\n        var maxDialogContentHeight = clientHeight - 2 * 64;\n        if (title) maxDialogContentHeight -= dialogContent.previousSibling.offsetHeight;\n\n        if (_react2.default.Children.count(actions)) {\n          maxDialogContentHeight -= dialogContent.nextSibling.offsetHeight;\n        }\n\n        dialogContent.style.maxHeight = maxDialogContentHeight + 'px';\n      }\n    }\n  }, {\n    key: 'requestClose',\n    value: function requestClose(buttonClicked) {\n      if (!buttonClicked && this.props.modal) {\n        return;\n      }\n\n      if (this.props.onRequestClose) {\n        this.props.onRequestClose(!!buttonClicked);\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props3 = this.props;\n      var actions = _props3.actions;\n      var actionsContainerClassName = _props3.actionsContainerClassName;\n      var actionsContainerStyle = _props3.actionsContainerStyle;\n      var bodyClassName = _props3.bodyClassName;\n      var bodyStyle = _props3.bodyStyle;\n      var children = _props3.children;\n      var className = _props3.className;\n      var contentClassName = _props3.contentClassName;\n      var contentStyle = _props3.contentStyle;\n      var overlayClassName = _props3.overlayClassName;\n      var overlayStyle = _props3.overlayStyle;\n      var open = _props3.open;\n      var titleClassName = _props3.titleClassName;\n      var titleStyle = _props3.titleStyle;\n      var title = _props3.title;\n      var style = _props3.style;\n      var prepareStyles = this.context.muiTheme.prepareStyles;\n      var styles = getStyles(this.props, this.context);\n      styles.root = (0, _simpleAssign2.default)(styles.root, style);\n      styles.content = (0, _simpleAssign2.default)(styles.content, contentStyle);\n      styles.body = (0, _simpleAssign2.default)(styles.body, bodyStyle);\n      styles.actionsContainer = (0, _simpleAssign2.default)(styles.actionsContainer, actionsContainerStyle);\n      styles.overlay = (0, _simpleAssign2.default)(styles.overlay, overlayStyle);\n      styles.title = (0, _simpleAssign2.default)(styles.title, titleStyle);\n\n      var actionsContainer = _react2.default.Children.count(actions) > 0 && _react2.default.createElement('div', {\n        className: actionsContainerClassName,\n        style: prepareStyles(styles.actionsContainer)\n      }, _react2.default.Children.toArray(actions));\n\n      var titleElement = title;\n\n      if (_react2.default.isValidElement(title)) {\n        titleElement = _react2.default.cloneElement(title, {\n          className: title.props.className || titleClassName,\n          style: prepareStyles((0, _simpleAssign2.default)(styles.title, title.props.style))\n        });\n      } else if (typeof title === 'string') {\n        titleElement = _react2.default.createElement('h3', {\n          className: titleClassName,\n          style: prepareStyles(styles.title)\n        }, title);\n      }\n\n      return _react2.default.createElement('div', {\n        className: className,\n        style: prepareStyles(styles.root)\n      }, open && _react2.default.createElement(_reactEventListener2.default, {\n        target: 'window',\n        onKeyUp: this.handleKeyUp,\n        onResize: this.handleResize\n      }), _react2.default.createElement(_reactAddonsTransitionGroup2.default, {\n        component: 'div',\n        ref: 'dialogWindow',\n        transitionAppear: true,\n        transitionAppearTimeout: 450,\n        transitionEnter: true,\n        transitionEnterTimeout: 450\n      }, open && _react2.default.createElement(TransitionItem, {\n        className: contentClassName,\n        style: styles.content\n      }, _react2.default.createElement(_Paper2.default, {\n        zDepth: 4\n      }, titleElement, _react2.default.createElement('div', {\n        ref: 'dialogContent',\n        className: bodyClassName,\n        style: prepareStyles(styles.body)\n      }, children), actionsContainer))), _react2.default.createElement(_Overlay2.default, {\n        show: open,\n        className: overlayClassName,\n        style: styles.overlay,\n        onTouchTap: this.handleTouchTapOverlay\n      }));\n    }\n  }]);\n\n  return DialogInline;\n}(_react.Component);\n\nDialogInline.propTypes = {\n  actions: _react.PropTypes.node,\n  actionsContainerClassName: _react.PropTypes.string,\n  actionsContainerStyle: _react.PropTypes.object,\n  autoDetectWindowHeight: _react.PropTypes.bool,\n  autoScrollBodyContent: _react.PropTypes.bool,\n  bodyClassName: _react.PropTypes.string,\n  bodyStyle: _react.PropTypes.object,\n  children: _react.PropTypes.node,\n  className: _react.PropTypes.string,\n  contentClassName: _react.PropTypes.string,\n  contentStyle: _react.PropTypes.object,\n  modal: _react.PropTypes.bool,\n  onRequestClose: _react.PropTypes.func,\n  open: _react.PropTypes.bool.isRequired,\n  overlayClassName: _react.PropTypes.string,\n  overlayStyle: _react.PropTypes.object,\n  repositionOnUpdate: _react.PropTypes.bool,\n  style: _react.PropTypes.object,\n  title: _react.PropTypes.node,\n  titleClassName: _react.PropTypes.string,\n  titleStyle: _react.PropTypes.object\n};\nDialogInline.contextTypes = {\n  muiTheme: _react.PropTypes.object.isRequired\n};\n\nvar Dialog = function (_Component3) {\n  _inherits(Dialog, _Component3);\n\n  function Dialog() {\n    var _Object$getPrototypeO3;\n\n    var _temp3, _this3, _ret3;\n\n    _classCallCheck(this, Dialog);\n\n    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    return _ret3 = (_temp3 = (_this3 = _possibleConstructorReturn(this, (_Object$getPrototypeO3 = Object.getPrototypeOf(Dialog)).call.apply(_Object$getPrototypeO3, [this].concat(args))), _this3), _this3.renderLayer = function () {\n      return _react2.default.createElement(DialogInline, _this3.props);\n    }, _temp3), _possibleConstructorReturn(_this3, _ret3);\n  }\n\n  _createClass(Dialog, [{\n    key: 'render',\n    value: function render() {\n      return _react2.default.createElement(_RenderToLayer2.default, {\n        render: this.renderLayer,\n        open: true,\n        useLayerForClickAway: false\n      });\n    }\n  }]);\n\n  return Dialog;\n}(_react.Component);\n\nDialog.propTypes = {\n  /**\n   * Action buttons to display below the Dialog content (`children`).\n   * This property accepts either a React element, or an array of React elements.\n   */\n  actions: _react.PropTypes.node,\n\n  /**\n   * The `className` to add to the actions container's root element.\n   */\n  actionsContainerClassName: _react.PropTypes.string,\n\n  /**\n   * Overrides the inline-styles of the actions container's root element.\n   */\n  actionsContainerStyle: _react.PropTypes.object,\n\n  /**\n   * If set to true, the height of the `Dialog` will be auto detected. A max height\n   * will be enforced so that the content does not extend beyond the viewport.\n   */\n  autoDetectWindowHeight: _react.PropTypes.bool,\n\n  /**\n   * If set to true, the body content of the `Dialog` will be scrollable.\n   */\n  autoScrollBodyContent: _react.PropTypes.bool,\n\n  /**\n   * The `className` to add to the content's root element under the title.\n   */\n  bodyClassName: _react.PropTypes.string,\n\n  /**\n   * Overrides the inline-styles of the content's root element under the title.\n   */\n  bodyStyle: _react.PropTypes.object,\n\n  /**\n   * The contents of the `Dialog`.\n   */\n  children: _react.PropTypes.node,\n\n  /**\n   * The css class name of the root element.\n   */\n  className: _react.PropTypes.string,\n\n  /**\n   * The `className` to add to the content container.\n   */\n  contentClassName: _react.PropTypes.string,\n\n  /**\n   * Overrides the inline-styles of the content container.\n   */\n  contentStyle: _react.PropTypes.object,\n\n  /**\n   * Force the user to use one of the actions in the `Dialog`.\n   * Clicking outside the `Dialog` will not trigger the `onRequestClose`.\n   */\n  modal: _react.PropTypes.bool,\n\n  /**\n   * Fired when the `Dialog` is requested to be closed by a click outside the `Dialog` or on the buttons.\n   *\n   * @param {bool} buttonClicked Determines whether a button click triggered this request.\n   */\n  onRequestClose: _react.PropTypes.func,\n\n  /**\n   * Controls whether the Dialog is opened or not.\n   */\n  open: _react.PropTypes.bool.isRequired,\n\n  /**\n   * The `className` to add to the `Overlay` component that is rendered behind the `Dialog`.\n   */\n  overlayClassName: _react.PropTypes.string,\n\n  /**\n   * Overrides the inline-styles of the `Overlay` component that is rendered behind the `Dialog`.\n   */\n  overlayStyle: _react.PropTypes.object,\n\n  /**\n   * Determines whether the `Dialog` should be repositioned when it's contents are updated.\n   */\n  repositionOnUpdate: _react.PropTypes.bool,\n\n  /**\n   * Override the inline-styles of the root element.\n   */\n  style: _react.PropTypes.object,\n\n  /**\n   * The title to display on the `Dialog`. Could be number, string, element or an array containing these types.\n   */\n  title: _react.PropTypes.node,\n\n  /**\n   * The `className` to add to the title's root container element.\n   */\n  titleClassName: _react.PropTypes.string,\n\n  /**\n   * Overrides the inline-styles of the title's root container element.\n   */\n  titleStyle: _react.PropTypes.object\n};\nDialog.contextTypes = {\n  muiTheme: _react.PropTypes.object.isRequired\n};\nDialog.defaultProps = {\n  autoDetectWindowHeight: true,\n  autoScrollBodyContent: false,\n  modal: false,\n  repositionOnUpdate: true\n};\nexports.default = Dialog;","map":null,"metadata":{},"sourceType":"script"}